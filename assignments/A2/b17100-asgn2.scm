#lang sicp
; Basic syntaxes for streams
(define the-empty-stream '())
(define (stream-null? s) (eq? s the-empty-stream))
(define (stream-car s1)
  (car s1))
;(define-syntax delay
 ; (syntax-rules()
  ;  ((delay a) (lambda () a))))
(define-syntax cons-stream
  (syntax-rules ()
    ((cons-stream a b) (cons a (delay b)))))
;(define (force exp)
 ;(exp))
(define (stream-cdr s)
  (force (cdr s)))
(define (stream-enumerate-interval low high)
  (if (> low high)
      the-empty-stream
      (cons-stream low (stream-enumerate-interval (+ low 1) high))))

(define (stream-filter pred s)
  (if (stream-null? s)
      the-empty-stream
      (if (eq? (pred (stream-car s)) #t)
          (cons-stream (stream-car s) (stream-filter pred (stream-cdr s)))
          (stream-filter pred (stream-cdr s)))))

(define (stream-map func s)
  (if (stream-null? s)
      the-empty-stream
      (cons-stream (func (stream-car s)) (stream-map func (stream-cdr s)))))

; END
      

(define harry the-empty-stream)
(define voldemort the-empty-stream)

(define (play Player1-strategy Player2-strategy firstPlayerMove numMatches)
  
  (define (stream-ref s n)
    (if (eq? n 0)
        (stream-car s)
        (stream-ref (stream-cdr s) (- n 1))))
  (define (obtainStream s)
    (if (eq? '() s) '()
        (cons-stream (obtainStream (stream-cdr s)) (stream-car s))))
  
  
  (define (getMoveStreams Player1-Strategy Player2-Strategy initialMovePlayer1 initialMovePlayer2 playerNo)
    (define countPaper-Player1 0)
    (define countScissor-Player1 0)
    (define countRock-Player1 0)

    (define countPaper-Player2 0)
    (define countScissor-Player2 0)
    (define countRock-Player2 0)

    (define (makeCount-for-each-player PlayerNumber move)
    (if (eq? PlayerNumber 1)
        (cond ((eq? move 1)
               (set! countRock-Player1 (+ 1 countRock-Player1)))
          ((eq? move 2)
               (set! countPaper-Player1 (+ 1 countPaper-Player1)))
          ((eq? move 3)
               (set! countScissor-Player1 (+ 1 countScissor-Player1))))
        (cond ((eq? move 1)
               (set! countRock-Player2 (+ 1 countRock-Player2)))
          ((eq? move 2)
               (set! countPaper-Player2 (+ 1 countPaper-Player2)))
          ((eq? move 3)
               (set! countScissor-Player2 (+ 1 countScissor-Player2))))))
    (makeCount-for-each-player 1 initialMovePlayer1)
    (makeCount-for-each-player 2  initialMovePlayer2)
    
    (define player1-strategy1Move initialMovePlayer1)
    (define player2-strategy1Move initialMovePlayer2)
    (define (getNextMove-Strategy1-player1)
      player2-strategy1Move)
    (define (getNextMove-Strategy1-player2)
      player1-strategy1Move)   

    (define (getNextMove-Player1 Player-Strategy)
    
      (define (getOppositeMove move)
        (cond ((eq? move 1)
               2)
              ((eq? move 3)
               1)
              ((eq? move 2)
               3)
              ))
      (define (getBestMove)
        (cond ((and (> countPaper-Player2 countScissor-Player2) (> countPaper-Player2 countRock-Player2))
               2)
              ((and (> countScissor-Player2 countRock-Player2) (> countScissor-Player2 countPaper-Player2))
               3)
              ((and (> countRock-Player2 countScissor-Player2) (> countRock-Player2 countPaper-Player2))
               1)
              (else 3)))
        
      (if (eq? Player-Strategy 1)
          (let* ((player1-next-move (getNextMove-Strategy1-player1))
                 )
            player1-next-move )
          (let* ((best_move (getBestMove))
                 (player2-next-move (getOppositeMove best_move))
                 )
            player2-next-move)) )

    (define (getNextMove-Player2 Player-Strategy)
      (define (getOppositeMove move)
        (cond ((eq? move 1)
               2)
              ((eq? move 3)
               1)
              ((eq? move 2)
               3)
              ))
      (define (getBestMove)
        (cond ((and (> countPaper-Player1 countScissor-Player1) (> countPaper-Player1 countRock-Player1))
               2)
              ((and (> countScissor-Player1 countRock-Player1) (> countScissor-Player1 countPaper-Player1))
               3)
              ((and (> countRock-Player1 countScissor-Player1) (> countRock-Player1 countPaper-Player1))
               1)
              (else 3)))
        
      (if (eq? Player-Strategy 1)
          (let* ((player2-next-move (getNextMove-Strategy1-player2))
                 )
            player2-next-move)
          (let* ((best_move (getBestMove))
                 (player2-next-move (getOppositeMove best_move))
                 )
            player2-next-move) ))

    (define (getNextMove-Player1-set Player1-Strategy Player2-Strategy)
    (define (getOppositeMove move)
         (cond ((eq? move 1)
                2)
                ((eq? move 3)
                1)
                ((eq? move 2)
                 3)
             ))
    (define (getBestMove-Player1)
      (cond ((and (> countPaper-Player2 countScissor-Player2) (> countPaper-Player2 countRock-Player2))
            2)
            ((and (> countScissor-Player2 countRock-Player2) (> countScissor-Player2 countPaper-Player2))
             3)
            ((and (> countRock-Player2 countScissor-Player2) (> countRock-Player2 countPaper-Player2))
             1)
            (else 3)))
    (define (getBestMove-Player2)
      (cond ((and (> countPaper-Player1 countScissor-Player1) (> countPaper-Player1 countRock-Player1))
            2)
            ((and (> countScissor-Player1 countRock-Player1) (> countScissor-Player1 countPaper-Player1))
             3)
            ((and (> countRock-Player1 countScissor-Player1) (> countRock-Player1 countPaper-Player1))
             1)
            (else 3)))
          ( if (eq? Player1-Strategy 1)
               (if (eq? Player2-Strategy 1)
                  (let* ((player2-next-move (getNextMove-Strategy1-player2))
                        (player1-next-move (getNextMove-Strategy1-player1))
                        (h1 (makeCount-for-each-player 1 player1-next-move))
              (h1 (makeCount-for-each-player 2 player2-next-move))) Player2-Strategy)
              (let* ((player2-next-move (getOppositeMove (getBestMove-Player2)))
                        (player1-next-move (getNextMove-Strategy1-player1))
                        (h1 (makeCount-for-each-player 1 player1-next-move))
              (h1 (makeCount-for-each-player 2 player2-next-move))) Player2-Strategy))
             (if (eq? Player2-Strategy 1)
                  (let* ((player2-next-move (getNextMove-Strategy1-player2))
                        (player1-next-move (getOppositeMove (getBestMove-Player1)))
                        (h1 (makeCount-for-each-player 1 player1-next-move))
              (h1 (makeCount-for-each-player 2 player2-next-move))) Player2-Strategy)
              (let* ((player2-next-move (getOppositeMove (getBestMove-Player2)))
                        (player1-next-move (getOppositeMove (getBestMove-Player1)))
                        (h1 (makeCount-for-each-player 1 player1-next-move))
              (h1 (makeCount-for-each-player 2 player2-next-move))) Player2-Strategy)))
)
    
    (define (getStreamsPlayer1 count harry1)
       (if (eq? count numMatches)
            (cons-stream harry1 '())
            (let  () (define player1-move (getNextMove-Player1 Player1-Strategy))
                   (define player2-move (getNextMove-Player2 Player2-Strategy))
                   (define player1-move-set (getNextMove-Player1-set Player1-Strategy Player2-Strategy))
                   (set! player1-strategy1Move player1-move)
                   (set! player2-strategy1Move player2-move)
               (cons-stream harry1 (getStreamsPlayer1 (+ count 1) player1-move)))))
    (define (getStreamsPlayer2 count voldemort1)
       (if (eq? count numMatches)
            (cons-stream voldemort1 '())
            (let  () (define player1-move (getNextMove-Player1 Player1-Strategy))
                   (define player2-move (getNextMove-Player2 Player2-Strategy))
                   (define player1-move-set (getNextMove-Player1-set Player1-Strategy Player2-Strategy))
                   (set! player1-strategy1Move player1-move)
                   (set! player2-strategy1Move player2-move) 
               (cons-stream voldemort1 (getStreamsPlayer2 (+ count 1) player2-move)))))
    
    (if (eq? playerNo 1)
        (getStreamsPlayer1 0 initialMovePlayer1)
        (getStreamsPlayer2 0 initialMovePlayer2)) )

  (define moveCode '((1 Rock)
                     (2 Paper)
                     (3 Scissor)))
  (define winStates '(((1 3) 1)
                      ((2 1) 1)
                      ((3 2) 1)
                      ((3 1) 2)
                      ((1 2) 2)
                      ((2 3) 2)))
  (define (getWinner firstMove secondMove)
    (if (eq? firstMove secondMove) 0
        (cadr (assoc (list firstMove secondMove) winStates)) ))
  
  (define (decideWinner firstPlayerWins secondPlayerWins)
    (cond ((= firstPlayerWins secondPlayerWins)  0)
          ((> firstPlayerWins secondPlayerWins)  1)
          (else 2)))
  
  (define (Main player1-harry player2-voldemort firstPlayerWins secondPlayerWins matchCount)
    (if (eq? numMatches matchCount)
       (decideWinner firstPlayerWins secondPlayerWins)
       (cond  ((eq? (getWinner (stream-car  player1-harry) (stream-car  player2-voldemort)) 1)
                (Main (stream-cdr  player1-harry) (stream-cdr  player2-voldemort)  (+ firstPlayerWins 1) secondPlayerWins (+ 1 matchCount) ))
               ((eq? (getWinner (stream-car  player1-harry) (stream-car  player2-voldemort)) 2)
                (Main (stream-cdr  player1-harry) (stream-cdr  player2-voldemort)  firstPlayerWins  (+ secondPlayerWins 1) (+ 1 matchCount)  ))
               ((eq? (getWinner (stream-car  player1-harry) (stream-car  player2-voldemort)) 0)
                (Main (stream-cdr  player1-harry) (stream-cdr  player2-voldemort)  firstPlayerWins secondPlayerWins (+ 1 matchCount)  )))))
  (define secondPlayerMove 1)
  
   (set! harry (getMoveStreams Player1-strategy Player2-strategy firstPlayerMove secondPlayerMove 1))
  (set! voldemort (getMoveStreams Player1-strategy Player2-strategy firstPlayerMove secondPlayerMove 2))

  (Main harry voldemort 0 0 0)     
  ;(getWinner 1 1)
    )


(define (fact n)
  (if (= n 0) 1
      (* n (fact (- n 1)))))
; Infinite stream of fact
(define (stream-fact n)
  (cons-stream n (stream-fact (* n (+ n 1)))))